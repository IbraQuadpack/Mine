from datetime import datetime
from openpyxl import Workbook
from calendar import monthrange

with open("/home/server/OTR.sql", 'r') as myfile:
    data = myfile.read()


str1 = """INSERT INTO `value` VALUES """
str2 = """/*!40000 ALTER TABLE `value` ENABLE KEYS"""
name = ['timestamp', 'Feedback_V101', 'Pot_cremador', 'Feedback_V002', 'TE101', 'TE105', 'TE107', 'TE108', 'TE111',
        'TE112',
        'TE113', 'PT102', 'PT103', 'PT104', 'PT109', 'Estat_OTR', 'V101', 'V102', 'V001', 'V011', 'V012', 'V013',
        'V021', 'V022', 'V023',
        'V031', 'V032', 'V033', 'V401', 'V402', 'V403', 'V404', 'V405', 'V406', 'V407', 'V408', 'Estat_linies',
        'Estat_filtres', 'lm',
        'PC_103_104', 'PC_102_109']

canvi_mes = 0


def sheet(list):
    y = list[0].year - 2000
    m = list[0].month
    d = list[0].day

    if m >= 10:
        sheet = str(m) + str(y)
    else:
        sheet = '0' + str(m) + str(y)
    return sheet, y, m, d



table = data[data.find(str1) + len(str1) + 1:data.find(str2) - 2]
inici = [0]
listData = []
dicc = {}
inici.append(table.find(str1)+inici[len(inici)-1])
while table.find(str1) != -1:
    table = table[table.find(str1)+len(str1)+1:-1]
    window = table[0:table.find(str1)]
    caca = window.split("),(")
    for c in caca:
        ar = []
        a = c.split(',')
        ar.append(datetime.strptime(a[0][1:-1],"%Y-%m-%d %H:%M:%S"))
        for i in range(1,len(a)-1):
            if a[i] != 'NULL':
                ar.append(float(a[i]))
        listData.append(ar)


# listData = [
#     [datetime(2020, 3, 17, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 18, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 19, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 20, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 21, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 22, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 23, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 24, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 25, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 26, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 27, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 28, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 29, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 30, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 3, 31, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 1, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 2, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 3, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 4, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 5, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 6, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 7, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 8, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 9, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 10, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 11, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 12, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 13, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 14, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 15, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 16, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 17, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#     [datetime(2020, 4, 18, 22, 40, 55), 0.0, 100.0, 17.1, 74.78, 833.52, 37.94, 67.15, 51.76, 51.33, -34.48, 271.71,
#      5.76, -96.93, 6.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0,
#      4.0, 3.0, 0.0, -306.18],
#
#     ]

fila = 2

wb = Workbook()
ws = wb.active
nom = sheet(listData[0])
back_month = listData[0][0].month

for i in range(len(name)):
    #ws[1][i + 1].value = name[i]
    ws.cell(1, i+1, name[i])


try :
    for instant in range (0,len(listData)) :
        vv,y,m,d = sheet(listData[instant])
        dies = monthrange(y, m)[1]
        if m != back_month :
            wb.save(nom)
            fila = 2
        for val in range(len(listData[instant])):
            if val == 0 :
                ws.cell(fila, 1, listData[instant][0].strftime("%m/%d/%Y, %H:%M:%S"))
            else :
                ws.cell(fila, val+1, listData[instant][val])
        fila+=1
        back_month = m
        nom = str(vv) + ".xlsx"
except Exception as e:
    print(e)
    nom = str(vv) + ".xlsx"
    wb.save(nom)



nom = str(vv) + ".xlsx"
wb.save(nom)






# k = problema[len(problema)-1][0].month
#
# for i in range (0,50) :
#     llista = problema[len(problema)-1]
#     print()
#     m = llista[0].month
#     k+=1
#     if k == 31 :
#         llista[0].month = m+1
#         k=1
#     llista[0].day = k
#     problema.append(llista)
#
# print(problema)
